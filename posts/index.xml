<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The GutHub</title>
    <link>/posts/</link>
    <description>Recent content in Posts on The GutHub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Sep 2020 15:16:15 +0200</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring ways to optimize compute shaders - Part 1</title>
      <link>/posts/compute_shaders/</link>
      <pubDate>Sat, 26 Sep 2020 15:16:15 +0200</pubDate>
      
      <guid>/posts/compute_shaders/</guid>
      <description>In this post we&amp;rsquo;ll be looking at compute shaders, profiling tools and failed experiments to improve performance. This is my journey learning compute shaders first through WebGPU and then Vulkan. My goal was to implement Conway&amp;rsquo;s Game Of Life algorithm in a brute force manner and to make it run as fast as possible on the GPU .
This will not be a tutorial on how to setup compute shaders.</description>
    </item>
    
    <item>
      <title>Integrating Dear ImGui in a custom Vulkan renderer</title>
      <link>/posts/vulkan_imgui/</link>
      <pubDate>Sat, 17 Aug 2019 15:16:15 +0200</pubDate>
      
      <guid>/posts/vulkan_imgui/</guid>
      <description>In this post we&amp;rsquo;ll be looking at integrating Dear ImGui in a custom Vulkan renderer. The audience I&amp;rsquo;m targeting is beginners still struggling with Vulkan. You should however have a basic Vulkan renderer already up and running. I followed Alexander Overvoorde&amp;rsquo;s amazing tutorial myself and I will use it as an example. The code is entirely available at vulkan-tutorial (go to the bottom of the page) if you&amp;rsquo;re willing to start from there as well.</description>
    </item>
    
  </channel>
</rss>